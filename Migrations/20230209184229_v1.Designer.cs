// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using agora.Data;

#nullable disable

namespace agora.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20230209184229_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("agora.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("autor");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "fk_comments_post_idx");

                    b.HasIndex(new[] { "Autor" }, "fk_comments_user_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("agora.Like", b =>
                {
                    b.Property<string>("UserNickname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_nickname");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.HasKey("UserNickname")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PostId" }, "fk_user_has_post_post1_idx");

                    b.HasIndex(new[] { "UserNickname" }, "fk_user_has_post_user1_idx");

                    b.ToTable("like", (string)null);
                });

            modelBuilder.Entity("agora.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("autor");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Autor" }, "fk_post_user_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE1");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("agora.PostDraft", b =>
                {
                    b.Property<string>("Autor")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("autor");

                    b.Property<string>("Body")
                        .HasColumnType("mediumtext")
                        .HasColumnName("body");

                    b.Property<string>("Title")
                        .HasColumnType("tinytext")
                        .HasColumnName("title");

                    b.HasKey("Autor")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Autor" }, "fk_post_draft_user_idx")
                        .IsUnique();

                    b.ToTable("post_draft", (string)null);
                });

            modelBuilder.Entity("agora.User", b =>
                {
                    b.Property<string>("Nickname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password");

                    b.HasKey("Nickname")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Nickname" }, "nickname_UNIQUE")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Follow", b =>
                {
                    b.Property<string>("FollowerUserNickname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("follower_user_nickname");

                    b.Property<string>("FollowedUserNickname")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("followed_user_nickname");

                    b.HasKey("FollowerUserNickname", "FollowedUserNickname")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FollowedUserNickname" }, "fk_followed_user_nickname_idx");

                    b.ToTable("follow", (string)null);
                });

            modelBuilder.Entity("agora.Comment", b =>
                {
                    b.HasOne("agora.User", "AutorNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("Autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_autor");

                    b.HasOne("agora.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_post");

                    b.Navigation("AutorNavigation");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("agora.Like", b =>
                {
                    b.HasOne("agora.Post", "Post")
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liked_post");

                    b.HasOne("agora.User", "UserNicknameNavigation")
                        .WithMany()
                        .HasForeignKey("UserNickname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liking_user");

                    b.Navigation("Post");

                    b.Navigation("UserNicknameNavigation");
                });

            modelBuilder.Entity("agora.Post", b =>
                {
                    b.HasOne("agora.User", "AutorNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("Autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_autor");

                    b.Navigation("AutorNavigation");
                });

            modelBuilder.Entity("agora.PostDraft", b =>
                {
                    b.HasOne("agora.User", "AutorNavigation")
                        .WithOne("PostDraft")
                        .HasForeignKey("agora.PostDraft", "Autor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_draft_user");

                    b.Navigation("AutorNavigation");
                });

            modelBuilder.Entity("Follow", b =>
                {
                    b.HasOne("agora.User", null)
                        .WithMany()
                        .HasForeignKey("FollowedUserNickname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_followed_user_nickname");

                    b.HasOne("agora.User", null)
                        .WithMany()
                        .HasForeignKey("FollowerUserNickname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follower_user_nickname");
                });

            modelBuilder.Entity("agora.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("agora.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostDraft");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
